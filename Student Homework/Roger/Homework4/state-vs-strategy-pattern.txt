State pattern跟Strategy pattern在結構上幾乎相同，但
1.目的不同，
課本中state pattern的目的是讓物件的外顯行為隨內部狀態的改變而改變
而Strategy pattern的目的是定義整族演算法，可在不影響外界的情形下個別抽換。

由目的不同可得知
2.聚焦的地方不同
state比strategy更聚焦在某個特定物件與其狀態，相較之下strategy比較沒有那麼聚焦在物件上。

3.變動的部分不同
state變動的部分是物件根據狀態不同而有不同的外顯行為，而strategy變動的部分是某個動作根據各種不同條件或是不同需求而使用不同的演算法。

以動物園的遊戲為例，若想模擬老虎因為本身肌餓狀態(不太餓，有點餓，很餓)的不同而有不同的進食速度，state pattern很適合
其中Context(老虎)hold住一個State(飢餓狀態)並有一個handle(吃)的行為。若日後希望更為逼真，在有點餓的狀態進食後
會轉變到不太餓的狀態(狀態轉移)，state pattern仍然適合。

動物園工作人員是另外一個例子，工作人員餵食的動作會因動物不同而異，像有草食性與肉食性動物。餵食的動作也可能有其他不同的變化
比如餵時前可能需要先準備水，或是餵時猛獸時需要採用投放的方式。這種時候適合使用strategy pattern，
分別定義餵食的動作(AlgorithmInterface)在動物各自的餵食策略(FeedStrategy)中
然後工作人員(Context)hold住一個餵食策略(FeedStrategy)。